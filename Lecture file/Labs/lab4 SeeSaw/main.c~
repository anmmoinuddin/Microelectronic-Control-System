/**
	@author Thomas Grunenberg
	@version 0.1
	@file main.c
	@brief Ball and Seesaw Template
*/

/**
	@brief The CPU speed in Hz
*/
#define F_CPU 8000000UL





/******************************************************************************/
/* INCLUDED FILES                                                             */
/******************************************************************************/
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>


#include "init.h"
#include "servo.h"
#include "irsensors.h"


/******************************************************************************/

/******************************************************************************/
/* Global memory                                                              */
/******************************************************************************/
volatile int old_error=0;
int horizontal=130;
volatile int error=0;	// error value 
volatile int output;	// servo positon set value
volatile int pos;		//postion value of the sensor	
volatile int old_pos = 0;
volatile int P;
volatile int D;
volatile int I;
 int timestep=2;
volatile int integral;
 int kp=1;
 int kd=1;
 int ki=1;
/******************************************************************************/
/* FUNCTIONS                                                                  */
/******************************************************************************/

void long_delay(uint16_t time){

	while(time > 0){
		if (time > 255){
			_delay_ms(255);
			time -= 255;
		} else {
			_delay_ms(1);
			time--;
		}
	}
	
	return;
}
/******************************************************************************/

inline void led_red(uint8_t onOrOff){
	if (onOrOff)
		PORTB |= ( 1 << PB0);
	else
		PORTB &= ~( 1 << PB0);
}
/******************************************************************************/

inline void led_green(uint8_t onOrOff){
	if (onOrOff)
		PORTD |= ( 1 << PD7);
	else
		PORTD &= ~( 1 << PD7);
}
/******************************************************************************/

/******************************************************************************/

/**
	@brief Main function
	@return only a dummy to avoid a compiler warning, not used
*/

volatile uint8_t counter = 0;
int main(void){

	init();
	servo_init();
	irsensors_init();

	TCCR0B |= (1 << CS02)|(1 << CS00);// prescaler 1024
	TIMSK0 |= (1 << TOIE0);
	sei(); 	

	
	servo_setPos(130);
	for (;;){ 	// Loop forever
		pos = irsensors_getRawPos();
		if (pos==1){
			error=-4;
			TCNT0 = 0;	
			counter = 0;	 
		}
		else if (pos==2){
			error=-2;
			TCNT0 = 0;
			counter = 0;
			  
		}
		else if (pos==3){
			error=-1;
			TCNT0 = 0;
			counter = 0;
			
		}
		else if (pos==4){
			error=1;
			TCNT0 = 0;
			counter = 0;
			
		}
		else if (pos==5){
			error=1;
			TCNT0 = 0;
			counter = 0;
			
		}
		else if (pos==6){
			error=2;
			TCNT0 = 0;
			counter = 0;
			
		}
		else if (pos==7){
			error=3;
			TCNT0 = 0;
			counter = 0;
			  
		}
		else if (pos==8){
			error=6;
			TCNT0 = 0;
			counter = 0;
			
		}
	P=(kp*error);
	D=(kd*(error-old_error))/timestep ;
	integral=integral+error;	
	I=(ki*(integral))/1000;

	
	output = horizontal+(P+ D+ I);
	
	servo_setPos(output);

	old_error = error;
	if ( pos != 0 )
		{
			old_pos = pos;
		}
		_delay_ms(100);
	}
	

	return 0;

}
	ISR(TIMER0_OVF_vect){
		counter++;
	}
/******************************************************************************/
